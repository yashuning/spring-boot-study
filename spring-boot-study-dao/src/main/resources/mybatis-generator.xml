<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>
    <!--classPathEntry:数据库的JDBC驱动,换成你自己的驱动位置 可选 -->
    <!-- 一个数据库一个context,defaultModelType="flat" 大数据字段，不分表 -->
    <context id="MysqlTables" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
        <property name="autoDelimitKeywords" value="true"/>

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="utf-8"/>

        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>

        <property name="endingDelimiter" value="`"/>

        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>

        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- 自动生成lombok注解配置和根据数据库注释为实体添加注释, 需要自己编译文件才可以实现,具体见https://www.jianshu.com/p/58ee7e09fc3f -->
        <plugin type="com.nys.study.spring.springbootstudy.dao.plugin.mybatisgenerator.LombokPlugin">
            <property name="hasLombok" value="true"/>
        </plugin>
        <!--        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>-->
        <!--        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>-->
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin"/>
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin"/>

        <!-- 注释 -->
        <commentGenerator type="com.nys.study.spring.springbootstudy.dao.plugin.mybatisgenerator.MyCommentGenerator">
            <!-- 是否取消注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="false"/>
            <!-- 是否生成注释代时间戳-->
            <property name="suppressDate" value="false"/>
            <!-- 添加 db 表中字段的注释 -->
            <property name="addRemarkComments" value="true"/>
        </commentGenerator>

        <!-- jdbc连接-->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://49.233.50.193:3306/basic_info?serverTimezone=GMT%2B8"
                        userId="root"
                        password="study_mysql">
            <property name="useInformationSchema" value="true"/>
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>

        <!-- java类型处理器 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
            <!--默认false
                false，将所有 JDBC 的时间类型解析为 java.util.Date
                true，将 JDBC 的时间类型按如下规则解析
                    DATE	                -> java.time.LocalDate
                    TIME	                -> java.time.LocalTime
                    TIMESTAMP               -> java.time.LocalDateTime
                    TIME_WITH_TIMEZONE  	-> java.time.OffsetTime
                    TIMESTAMP_WITH_TIMEZONE	-> java.time.OffsetDateTime
                -->
            <!--<property name="useJSR310Types" value="false"/>-->
        </javaTypeResolver>

        <!-- 生成实体类地址 -->
        <javaModelGenerator targetPackage="com.nys.study.spring.springbootstudy.dao.mysql.entity"
                            targetProject="spring-boot-study-dao/src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!-- 是否对modal添加构造函数 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter-->
            <property name="constructorBased" value="false"/>
            <!--是否创建一个不可变的类，如果为true，那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 -->
            <property name="immutable" value="false"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 生成map.xml文件 -->
        <sqlMapGenerator targetPackage="mybatis.mapper" targetProject="spring-boot-study-dao/src/main/resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- 生成 XxxMapper.java 接口
        type：选择生成mapper接口类型（在MyBatis3/MyBatis3Simple下）：
            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="com.nys.study.spring.springbootstudy.dao.mysql.mapper"
                             targetProject="spring-boot-study-dao/src/main/java" type="XMLMAPPER">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!--
        schema为数据库名，oracle需要配置，mysql不需要配置。
             tableName为对应的数据库表名
             domainObjectName 是要生成的实体类名(可以不指定，默认按帕斯卡命名法将表名转换成类名)
             enableXXXByExample 默认为 true， 为 true 会生成一个对应Example帮助类，帮助你进行条件查询，不想要可以设为false -->
<!--        <table tableName="basic_user_info" domainObjectName="BasicUserInfoPO"-->
<!--               enableSelectByPrimaryKey="false"-->
<!--               enableSelectByExample="true"-->
<!--               enableCountByExample="false"-->
<!--               enableDeleteByPrimaryKey="false"-->
<!--               enableDeleteByExample="false"-->
<!--               enableUpdateByPrimaryKey="true"-->
<!--               enableUpdateByExample="true"-->
<!--        />-->

        <table tableName="spring_scheduled_cron" domainObjectName="SpringScheduledCronPO"
               enableSelectByPrimaryKey="false"
               enableSelectByExample="true"
               enableCountByExample="false"
               enableDeleteByPrimaryKey="false"
               enableDeleteByExample="false"
               enableUpdateByPrimaryKey="true"
               enableUpdateByExample="true"
        />

    </context>
</generatorConfiguration>